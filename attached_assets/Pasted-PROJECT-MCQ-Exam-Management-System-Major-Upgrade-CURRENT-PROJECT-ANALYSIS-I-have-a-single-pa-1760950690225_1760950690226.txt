PROJECT: MCQ Exam Management System - Major Upgrade

CURRENT PROJECT ANALYSIS:
I have a single-page MCQ exam system with:
- 3 semesters of questions (semester1.js, semester2.js, semester3.js)
- Modern UI with Tailwind CSS
- Features: Test generation, PDF creation, OCR checking, question bank
- Main files: index.html, app.js, semester[1-3].js

MAJOR CHANGES REQUIRED:

1. MULTI-PAGE ARCHITECTURE:
   - Convert from single-page to multi-page application
   - Separate pages for: Courses, Semesters, Books, Test Generation, Question Bank, PDF Creation, OCR Checking, Online Test, Test History, Comparison Page
   - Proper navigation between pages

2. COURSE MANAGEMENT SYSTEM:
   - Two main courses: "ACCP-7062-Prime2.0" and "ACCP-7144-AI"
   - Each course has 6 semesters (currently only 3 populated for ACCP-7144-AI)
   - Dynamic course/semester pages that don't show empty semesters

3. IMPROVED SEMESTER & BOOK SELECTION:
   - Remove multi-semester checkboxes
   - User flow: Select Course → Select Semester → Select Books (single/multiple) → Generate Test
   - Only show books from selected semester

4. 20-MARK ONLINE TEST SYSTEM:
   - Dedicated online test page with questions totaling 20 marks
   - Real-time scoring as students answer
   - Timer functionality (optional)
   - Auto-submission when time ends or all questions answered
   - Immediate results with correct/incorrect indicators

5. TEST HISTORY & COMPARISON SYSTEM:
   - Separate online test history (with student answers) from printed paper history
   - Online tests: Store student answers, calculate scores out of 20 marks
   - Printed papers: Store only questions (no student answers until checked)
   - Add Comparison Page for printed papers:
     * Select printed paper from history
     * View all questions with correct answers highlighted
     * Search box to find specific questions by text
     * Copy-paste question text to instantly find correct answer
     * Side-by-side view: Printed questions vs Correct answers
     * Calculate marks after manual checking (always out of 20 total)

6. FIX ANSWER VISIBILITY ISSUES:
   - Ensure answers are properly mapped after randomization
   - Show answers only in review/comparison sections, NOT in printed exam papers
   - Create answer keys for printed question papers (separate from exam paper)

7. PROFESSIONAL PRINT TEMPLATES:
   - Remove course family from printed papers - show only selected book names
   - Remove answers from printed exam papers
   - Fix marks calculation: Always total 20 marks regardless of question count
   - Dynamic marks per question: Each question = (20 / total_questions) marks
   - Update instruction text: "Each question carries X marks" where X = 20/total_questions
   - Auto-save printed papers to history before printing
   - Customizable page layouts (margins, fonts, spacing)

8. COMPREHENSIVE DARK MODE FIXES:
   - Fix text visibility issues in dark mode across all pages
   - Ensure consistent dark theme application (not just backgrounds)
   - Fix: Cards, form inputs, buttons, tables, navigation, PDF preview, OCR results
   - Implement proper contrast ratios for accessibility
   - Ensure all text colors adapt correctly to dark mode
   - Fix border colors and shadows in dark theme

9. QUESTION BANK ENHANCEMENTS:
   - Filter by course → semester → book
   - Search within selected categories
   - Better organization and navigation

10. DATA STRUCTURE UPGRADES:
    - Support for multiple courses with placeholder semesters
    - Easy addition of new courses and semesters
    - Dynamic loading of course data
    - Local storage for test history and user progress

TECHNICAL REQUIREMENTS:
- Maintain existing Tailwind CSS styling
- Keep all current functionality (OCR, PDF generation, etc.)
- Ensure backward compatibility with existing question data
- Use modern JavaScript modules
- Implement proper error handling
- Use localStorage for test history persistence
- All data handling client-side only (for GitHub Pages compatibility)

PAGES TO CREATE:
1. Courses Page - List all courses
2. Semester Page - List semesters for selected course
3. Books Page - Select books for test generation
4. Online Test Page - Questions totaling 20 marks
5. Test Results Page - Immediate results after online test
6. Test History Page - Separate online/printed history
7. Comparison Page - Check printed papers against correct answers
8. PDF Generation Page - Print paper with auto-save to history
9. Question Bank Page - Filter by course/semester/book
10. OCR Checking Page - Existing functionality

PRIORITY:
1. Fix answer visibility and dark mode issues
2. Implement multi-page architecture
3. Add 20-mark online test system
4. Implement test history with comparison page
5. Fix print formatting and marks calculation
6. Add course management system
7. Improve semester/book selection flow

ALL FEATURES MUST WORK CLIENT-SIDE ONLY FOR GITHUB PAGES DEPLOYMENT.